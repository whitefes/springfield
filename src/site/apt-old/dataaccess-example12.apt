 -----
 Data Access
 -----
 www.u2ware.com
 -----
 -----

Data Access 
~~~~~~~~~~~~~~~~~~~~

* JpaBean
~~~~~~~~~~~~~~~~~~~~

+------------------------------------------------------------------------+
package example.u2ware.springfield.part1.step2;

import javax.persistence.Entity;
import javax.persistence.Id;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import com.u2ware.springfield.config.Springfield;
import com.u2ware.springfield.config.Springfield.Strategy;

@Springfield(
	strategy=Strategy.JPA
)
@Entity
public @ToString class JpaBean {

	@Id
	@Getter @Setter private Integer id;
	@Getter @Setter private String password;
	@Getter @Setter private String name;
	@Getter @Setter private String address;
}
+------------------------------------------------------------------------+

* @Springfield
~~~~~~~~~~~~~~~~~~~

 @Springfield(strategy=Strategy.JPA) 선언으로 다음 4개의 Bean 이 자동 생성, 등록 된다.

*-------------------------+----------------------------------------------+------------------------------+
| bean id                 | bean type                                    | implements                   |
*-------------------------+----------------------------------------------+------------------------------+
| "jpaBeanController"   | < EntityController\<JpaBean, JpaBean\> > |  com.u2ware.springfield.controller. EntityHandler |
*-------------------------+----------------------------------------------+------------------------------+
| "jpaBeanValidator"  | < EntityValidator\<JpaBean, JpaBean\> >  | com.u2ware.springfield.validation. EntityValidatorImpl   |
*-------------------------+--------------------------------------------------+------------------------------+
| "jpaBeanService"      | < EntityService\<JpaBean, JpaBean\> >    | com.u2ware.springfield.service. EntityServiceImpl  |
*-------------------------+----------------------------------------------+------------------------------+
| "jpaBeanRepository"        | < EntityRepository\<JpaBean, Integer\> >           | com.u2ware.springfield.repository.jpa. EntityJpaRepository  |
*-------------------------+----------------------------------------------+------------------------------+


		[application-context.properties:]  
			jpa 설정
			
                orm.jpa.defaultPersistenceUnitName=em\
                orm.jpa.hibernate.dialect=org.hibernate.dialect.HSQLDialect\
                #orm.jpa.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\
                #orm.jpa.hibernate.hbm2ddl.auto=validate\
                orm.jpa.hibernate.hbm2ddl.auto=update\
                orm.jpa.hibernate.show_sql=true\
                orm.jpa.hibernate.format_sql=true



  [Reference:]  
            {{{http://docs.jboss.org/hibernate/entitymanager/3.6/reference/en/html/}JPA}}\
 			{{{http://static.springsource.org/spring-data/data-jpa/docs/current/reference/html/}spring-data-jpa}}\
 

 
* RequestMapping
~~~~~~~~~~~~~~~~~~~

  EntityController 는 CRUD 를 기본으로 한 9 개의 method 에 {{{http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/mvc.html#mvc-ann-methods}RequestMapping}} 한다.
 
*------+-------------*----------------------+------------------------+--------+
|매핑 경로 | HTTP Method | Controller Method 이름  | 예제 Command 객체 |  예제 매핑 경로   |
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>/                        | GET    | home       | JpaBean| /part1/step2/       |
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>                         | GET    | findForm   | JpaBean| /part1/step2        |
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>                         | POST   | find       | JpaBean| /part1/step2        |
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>/<<<\{>>>id<<<\}>>>      | GET    | read       | JpaBean| /part1/step2/7      | 
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>/new                     | GET    | createForm | JpaBean| /part1/step2/new    |
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>/new                     | POST   | create     | JpaBean| /part1/step2/new    | 
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>/<<<\{>>>id<<<\}>>>/edit | GET    | updateForm | JpaBean| /part1/step2/7/eidt |
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>/<<<\{>>>id<<<\}>>>/edit | PUT    | update     | JpaBean| /part1/step2/7/eidt |
*------+-------------*----------------------+------------------------+--------+
| /<<<\{>>>topLevelMapping<<<\}>>>/<<<\{>>>id<<<\}>>>/edit | DELETE | delete     | JpaBean| /part1/step2/7/eidt |
*------+-------------*----------------------+------------------------+--------+

      [Note:]  
          Springfield 는  @javax.persistence.Id 를  읽어서  RequestMapping 의  <<\{id\}>> 를 결정하는 용도로 사용한다.
  

  [Note:] 
            topLevelMapping 은  별도의 선언 이 없으면, basePackage 를 기준으로 결정된다. \
                            예제에서 basePackage 는 example.u2ware.springfield 이므르 예제에서 topLevelMapping 은 /part1/step2 이 된다.


 

