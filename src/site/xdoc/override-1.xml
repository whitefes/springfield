<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
<properties>
	<title>@Springfield - Override</title>
	<author email="u2waremanager@gmail.com">www.u2ware.com</author>
</properties>
<body>
<section name="@Springfield - Override">
	<subsection name="Code">
		<source><![CDATA[
package com.u2ware.springfield.sample.part3.step1;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.validation.constraints.NotNull;

import lombok.Getter;
import lombok.Setter;

import com.u2ware.springfield.config.Springfield;
import com.u2ware.springfield.config.Springfield.Strategy;

@Springfield(
	strategy=Strategy.JPA
)
@Entity
public class TargetBean {

	@Id
	@Getter @Setter private @NotNull String id;
	@Getter @Setter private @NotNull String password;
	@Getter @Setter private @NotNull String name;
	@Getter @Setter private @NotNull Integer age;
}
		]]></source>
		<source><![CDATA[
package com.u2ware.springfield.sample.part3.step1;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.u2ware.springfield.repository.EntityRepository;
import com.u2ware.springfield.service.EntityServiceImpl;
import com.u2ware.springfield.validation.RejectableException;

@Service
public class TargetBeanService extends EntityServiceImpl<TargetBean, TargetBean> {

	@Autowired @Qualifier("targetBeanRepository")
	private EntityRepository<TargetBean, String> targetBeanRepository;

	@Override
	protected EntityRepository<TargetBean, String> getRepository() {
		return targetBeanRepository;
	}
	
	@Override
	@Transactional
	public TargetBean create(TargetBean entity) {
		if(getRepository().exists(entity)){
			throw new RejectableException("id" , "Duplication", "중복키입니다.");
		}
		return getRepository().create(entity);
	}
	
}
		]]></source>
	</subsection>

	<subsection name="Beans">
		<p>
			<b>@Springfield(strategy=Strategy.JPA)</b> 선언으로 다음 4개의 Bean 이 등록 된다. 
			자동생성 하려는  Bean(Name)이  이미  존재한다면,  @Springfield 는 Bean 을 따로 생성하지 않는다.
		</p>	
		<table border="1">
			<tr><th>bean name  </th>	<th>bean type</th>	<th>bean implement</th></tr>
			<tr><td>"targetBeanController"</td><td><i><![CDATA[EntityController<TargetBean, TargetBean>]]></i></td><td>com.u2ware.springfield.controller. EntityHandler</td></tr>
			<tr><td>"targetBeanValidator"</td> <td><i><![CDATA[EntityValidator<TargetBean, TargetBean>]]></i></td> <td>com.u2ware.springfield.validation. EntityValidatorImpl</td></tr>
			<tr><td>"targetBeanService"</td>   <td><i><![CDATA[EntityService<TargetBean, TargetBean>]]></i></td>   <td><b>com.u2ware.springfield.sample.part3.step1. TargetBeanService </b></td></tr>
			<tr><td>"targetBeanRepository"</td><td><i><![CDATA[EntityRepository<TargetBean, String>]]></i></td><td>com.u2ware.springfield.repository.jpa. EntityJpaRepository</td></tr>
		</table>
	</subsection>
	<subsection name="RequestMapping">
		<table border="1">
			<tr><th>매핑 경로</th>	<th>HTTP Method</th>	<th>Controller Method 이름</th>	<th>예제 Command 객체</th>	<th>예제 매핑 경로</th></tr>
			<tr><td><i>/{topLevelMapping}/</i></td>         <td>GET</td>   <td>home()</td>      <td>TargetBean</td><td>/part3/step1/</td></tr>
			<tr><td><i>/{topLevelMapping}</i></td>          <td>GET</td>   <td>findForm()</td>  <td>TargetBean</td><td>/part3/step1</td></tr>
			<tr><td><i>/{topLevelMapping}</i></td>          <td>POST</td>  <td>find()</td>      <td>TargetBean</td><td>/part3/step1</td></tr>
			<tr><td><i>/{topLevelMapping}/{id}</i></td>     <td>GET</td>   <td>read()</td>      <td>TargetBean</td><td>/part3/step1/foo</td></tr>
			<tr><td><i>/{topLevelMapping}/new</i></td>      <td>GET</td>   <td>createForm()</td><td>TargetBean</td><td>/part3/step1/new</td></tr>
			<tr><td><i>/{topLevelMapping}/new</i></td>      <td>POST</td>  <td>create()</td>    <td>TargetBean</td><td>/part3/step1/new</td></tr>
			<tr><td><i>/{topLevelMapping}/{id}/edit</i></td><td>GET</td>   <td>updateForm()</td><td>TargetBean</td><td>/part3/step1/foo/eidt</td></tr>
			<tr><td><i>/{topLevelMapping}/{id}/edit</i></td><td>PUT</td>   <td>update()</td>    <td>TargetBean</td><td>/part3/step1/foo/eidt</td></tr>
			<tr><td><i>/{topLevelMapping}/{id}/edit</i></td><td>DELETE</td><td>delete()</td>    <td>TargetBean</td><td>/part3/step1/foo/eidt</td></tr>
		</table>
	</subsection>

	<subsection name="Service Layer">
		<p>Bean Name 규칙이 맞도록, <i>EntityService</i> 의 구현체를 작성하고 등록한다. <b>EntityServiceImpl</b> 를 상속하여 구현이 가능하다.</p>
		<dl>
			<dt>com.u2ware.springfield.service.EntityServiceImpl</dt>
			<dd><p><b>EntityServiceImpl</b> 은   <i>EntityRepository</i> 를 주입 받아서 Repository 를 이용한 기본적인 CRUD 를 처리하는 Service 컴퍼넌트이다.</p></dd>
		</dl>
	</subsection>

	<subsection name="Validation Layer">
		<p>
			<b>com.u2ware.springfield.validation. RejectableException</b>이 발생하면  EntityController 에서 이를 
			Validation results Object ( <b>org.springframework.validation. BindingResult</b>) 에  reject 한다.
		</p>
		<dl>
			<dt>Note</dt>
			<dd>
				@Springfield 에서 Validation 처리는 두가지 방법을 적절히 이용할 수 있다.
			</dd>
			<dd>
				<ol>
					<li><b>RejectableException</b> 을 이용하여 서비스 레이어에서 예외를 던지는 방식. 주로 비즈니스 의존적인 검증 프로세스에 쓰인다.</li> 
					<li><b>EntityValidator</b> 에서 처리하는 방식. <a href="./override-2.html">예제</a></li> 
				</ol>
			</dd>
		</dl>
	</subsection>

</section>
</body>
</document>