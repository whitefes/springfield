<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
<properties>
	<title>Security</title>
	<author email="u2waremanager@gmail.com">www.u2ware.com</author>
</properties>

<body>
<section name="Component">

	<p>
		<a href="http://www.springsource.org/spring-security">Spring Security</a> 모듈을 위해  @Springfield 에서는   몇몇의 구현체가 필요하다.
	</p>
	<ul>
		<li>com.u2ware.springfield.security.authentication. SaltedUserDetails</li>
		<li>com.u2ware.springfield.security.authentication. UserDetailsRepository</li>
		<li>org.springframework.security.web.authentication.rememberme. PersistentTokenRepository</li>
	</ul>
	<p>
		또한, @Springfield 에서는 로그인 폼 페이지를 작성하는 것을 권장한다.
	</p>
	<ul>
		<li>login.html</li>
	</ul>

	<subsection name="SaltedUserDetails Interface">
		<p>
			<b>com.u2ware.springfield.security.authentication. SaltedUserDetails</b> 는 
			Password 암호가 처리를 위한  <b>org.springframework.security.core.userdetails.UserDetails</b> 의 확장 인터페이스이다.
		</p>
		<source><![CDATA[
package com.u2ware.springfield.security.authentication;

import org.springframework.security.core.userdetails.UserDetails;

public interface SaltedUserDetails extends UserDetails{

	public Object getSalt();
}
		]]></source>
		
	</subsection>

	<subsection name="UserDetailsRepository Interface">
		<p>
			인증(authentication) 을 위헤 
			<b>com.u2ware.springfield.security.authentication. UserDetailsRepository</b> 구현체가 bean 으로 등록 되어야 한다. 
		</p>
		<p>
			@Springfield 는 
			<b>org.springframework.security.core.userdetails. UserDetailsService</b>의 구현체인 
			<b>com.u2ware.springfield.security.authentication. SimpleUserDetailsService</b>를 제공 하며, 
			이 컴퍼넌트는 작성한 UserDetailsRepository 를 자동 추적하여 사용한다.
		</p>
		<source><![CDATA[
public interface UserDetailsRepository {
	public UserDetails loadUserByUsername(String username) throws DataAccessException;
}
		]]></source>

	</subsection>
	<subsection name="PersistentTokenRepository Interface">
		<p>
			Remember Me 서비스를 위해 
			<b>org.springframework.security.web.authentication.rememberme. PersistentTokenRepository</b> 구현체가 bean 으로 등록 되어야 한다. 
		</p>
		<source><![CDATA[
public interface PersistentTokenRepository {

    void createNewToken(PersistentRememberMeToken token);

    void updateToken(String series, String tokenValue, Date lastUsed);

    PersistentRememberMeToken getTokenForSeries(String seriesId);

    void removeUserTokens(String username);

}
		]]></source>
	</subsection>
	<subsection name="Login Form Page">
		<p>
			각종 설정값을 기준으로 을 로그인 폼 페이지를 작성한다. 	
		</p>
		<source><![CDATA[
<form method="post" action="/j_spring_security_check" >

	id : <input type="text" name="j_username"/>

	Password : <input type="hidden" name="j_password"/>

	RememberMe : <input type="checkbox" name="_spring_security_remember_me"/>

	<input type="submit"/>
</form>
		]]></source>
	</subsection>
</section>
</body>
</document>