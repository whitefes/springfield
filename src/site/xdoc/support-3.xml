<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
<properties>
	<title>@Springfield - Support</title>
	<author email="u2waremanager@gmail.com">www.u2ware.com</author>
</properties>

<body>
<section name="Ajax File Upload">
	<subsection name="Code">
		<source><![CDATA[
package com.u2ware.springfield.sample.others.multipart;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.u2ware.springfield.support.multipart.MultipartFileController;
import com.u2ware.springfield.support.multipart.MultipartFileHandler;

@Controller
@RequestMapping("/others/multipart")
public class AjaxUploadController extends MultipartFileController{
	
	@Autowired 
	private MultipartFileHandler multipartFileHandler;
	
	public MultipartFileHandler getMultipartFileHandler() {
		return multipartFileHandler;
	}

	@RequestMapping(value = "/upload", method = RequestMethod.GET)
	public String uploadForm() throws Exception {
		return "/others/multipart/uploadForm";
	}
}
		]]></source>
	</subsection>
	<subsection name="RequestMapping">
		<table border="1">
			<tr><th>Controller </th>	<th>HTTP Method</th>	<th>예제 매핑 경로</th>  <th>Response</th> </tr>
			<tr><td rowspan="3">com.u2ware.springfield.sample.others.multipart.AjaxUploadController </td> <td>GET</td>   <td>/others/multipart/upload</td>  <td><b>Ajax fileupload Page</b></td> </tr>
			<tr> <td>POST</td>   <td>/others/multipart/upload</td> <td>json</td></tr>
			<tr>  <td>POST</td>  <td>/others/multipart/delete</td> <td>json</td> </tr>
		</table>
	</subsection>

	<subsection name="MultipartFileController">
		<dl>
			<dt>Note:</dt>
			<dd>
				@Springfield 는 비동기 파일 업로드를 위해 <b>com.u2ware.springfield.view.multipart. MultipartFileController</b> 를 제공한다. 
			</dd>
		</dl>

		<source><![CDATA[
public abstract class MultipartFileController {

	@RequestMapping(value="/upload", method=RequestMethod.POST)
	public View upload(HttpServletRequest request, HttpServletResponse response, @RequestParam("multipartFile")MultipartFile[] multipartFile, Model model) throws Exception{
		.
		.
		.
	}

	@RequestMapping(value="/delete", method=RequestMethod.POST)
	public View delete(HttpServletRequest request, HttpServletResponse response, @RequestParam("multipartFile")String[] multipartFile, Model model) throws Exception{
		.
		.
		.
	}
}
		]]></source>
	</subsection>

	<subsection name="Ajax fileupload Page">
		<dl>
			<dt>Note:</dt>
			<dd>
				 Ajax fileupload 를 위한 HTML Page 작성 예제이다. <a href="http://demos.kendoui.com/web/upload/async.html">kendoui Asynchronous Upload</a> 이 사용되었다.
			</dd>
		</dl>
		<source><![CDATA[
<form>
	<input type="file" name="multipartFile" id="multipartFile" multiple="multiple"/>
</form>

<script>
	$(document).ready(function() {
		$("#multipartFile").kendoUpload({
			async: {
				saveUrl: "/others/multipart/upload",
				removeUrl: "/others/multipart/delete",
				autoUpload: true
			},  
			cancel: onCancel,
			complete: onComplete,
			error: onError,
			progress: onProgress,
			remove: onRemove,
			select: onSelect,
			success: onSuccess,
			upload: onUpload
		});
	});
		
	function onSelect(e) {
		console.log("Select :: " + getFileInfo(e));
	}
	
	function onUpload(e) {
		console.log("Upload :: " + getFileInfo(e));
	}
	
	function onSuccess(e) {
		e.files[0]['contentFile'] = e.response.contentFile;
		console.log("Success :: " + getFileInfo(e));
	}
	
	function onError(e) {
		console.log("Error (" + e.operation + ") :: " + getFileInfo(e));
	}
	
	function onProgress(e) {
		console.log("Progress (" + e.operation + ") :: " + getFileInfo(e));
	}
	
	function onComplete(e) {
		console.log("Success :: " + getFileInfo(e));
	}
	
	function onCancel(e) {
		console.log("Cancel :: " + getFileInfo(e));
	}
	
	function onRemove(e) {
		e.data = {"multipartFile" : e.files[0]['contentFile']}
		console.log("Remove :: " + getFileInfo(e));
	}		
	
	function getFileInfo(e) {
		return e;
	}        
</script>
		]]></source>
	
	
	
	</subsection>



</section>
</body>
</document>