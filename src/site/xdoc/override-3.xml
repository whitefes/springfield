<?xml version="1.0"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
<properties>
	<title>@Springfield - Override</title>
	<author email="u2waremanager@gmail.com">www.u2ware.com</author>
</properties>
<body>
<section name="@Springfield - Override">
	<subsection name="Code">
		<source><![CDATA[
package com.u2ware.springfield.sample.part3.step3;

import lombok.Getter;
import lombok.Setter;

import com.u2ware.springfield.config.Springfield;
import com.u2ware.springfield.config.Springfield.Strategy;


@Springfield(
	strategy=Strategy.DTO,
	identity={"id"}
)
public class FormBean {

	@Getter @Setter private String id;
	@Getter @Setter private Integer age;
}
		]]></source>
		<source><![CDATA[
package com.u2ware.springfield.sample.part3.step3;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.u2ware.springfield.domain.EntityPageImpl;
import com.u2ware.springfield.domain.EntityPageable;
import com.u2ware.springfield.repository.EntityRepository;
import com.u2ware.springfield.sample.part3.step1.TargetBean;
import com.u2ware.springfield.service.EntityService;

@Service
public class FormBeanService implements EntityService<FormBean, FormBean>{

	protected final Log logger = LogFactory.getLog(getClass());

	@Autowired 
	@Qualifier("targetBeanRepository")
	protected EntityRepository<TargetBean, String> targetBeanRepository;

	@Override
	@Transactional
	public Iterable<?> findForm(FormBean query, EntityPageable pageable) {
		return find(query, pageable);
	}

	@Override
	@Transactional
	public Iterable<?> find(FormBean query, EntityPageable pageable) {
		if(pageable != null && pageable.isEnable()){
			return new EntityPageImpl<TargetBean>(targetBeanRepository.findAll(query, pageable));
		}else{
			return targetBeanRepository.findAll(query, pageable);
		}
	}
	
	@Override
	public Object home(FormBean query) {
		return query;
	}

	@Override
	public FormBean createForm(FormBean entity) {
		return entity;
	}

	@Override
	public FormBean updateForm(FormBean entity) {
		return entity;
	}

	@Override
	@Transactional
	public FormBean read(FormBean entity) {
		TargetBean target = targetBeanRepository.read(entity.getId());
		entity.setId(target.getId());
		entity.setAge(target.getAge());
		return entity;
	}

	
	@Override
	@Transactional
	public FormBean create(FormBean entity) {
		TargetBean target = new TargetBean();
		target.setId(entity.getId());
		target.setPassword("password"+entity.getId());
		target.setName("name"+entity.getId());
		target.setAge(entity.getAge());

		targetBeanRepository.create(target);
		return entity;
	}


	@Override
	@Transactional
	public FormBean update(FormBean entity) {
		TargetBean target = targetBeanRepository.read(entity.getId());
		target.setId(entity.getId());
		target.setAge(entity.getAge());
		return entity;
	}

	@Override
	@Transactional
	public FormBean delete(FormBean entity) {
		targetBeanRepository.delete(entity.getId());
		return entity;
	}

}
		]]></source>

	</subsection>
	
	<subsection name="Beans">
		<p>
			<b>@Springfield(strategy=Strategy.DTO)</b> 선언으로 다음 3개의 Bean 이 등록 된다.선언으로 다음 3개의 Bean 이  등록 된다.
			 자동생성 하려는  Bean(Name)이  이미  존재한다면,  @Springfield 는 Bean 을 따로 생성하지 않는다.
		</p>
		<table border="1">
			<tr><th>bean name  </th>	<th>bean type</th>	<th>bean implement</th></tr>
			<tr><td>"formBeanController"</td><td><i><![CDATA[EntityController<FormBean, FormBean>]]></i></td><td>com.u2ware.springfield.controller. EntityHandler</td></tr>
			<tr><td>"formBeanValidator"</td> <td><i><![CDATA[EntityValidator<FormBean, FormBean>]]></i></td> <td>com.u2ware.springfield.validation. EntityValidatorImpl</td></tr>
			<tr><td>"formBeanService"</td>   <td><i><![CDATA[EntityService<FormBean, FormBean>]]></i></td>   <td><b>com.u2ware.springfield.sample.part3.step3. FormBeanService</b></td></tr>
		</table>
		<dl>
			<dt>Note:</dt>
			<dd>FormBeanService 에서 주입받은 "targetBeanRepository" Bean 은  이전 예제에서 이미 등록되어 있다.</dd>
		</dl>
	</subsection>
	<subsection name="RequestMapping">
		<table border="1">
			<tr><th>매핑 경로</th>	<th>HTTP Method</th>	<th>Controller Method 이름</th>	<th>예제 Command 객체</th>	<th>예제 매핑 경로</th></tr>
			<tr><td><i>/{topLevelMapping}/</i></td>         <td>GET</td>   <td>home()</td>      <td>FormBean</td><td>/part3/step3/</td></tr>
			<tr><td><i>/{topLevelMapping}</i></td>          <td>GET</td>   <td>findForm()</td>  <td>FormBean</td><td>/part3/step3</td></tr>
			<tr><td><i>/{topLevelMapping}</i></td>          <td>POST</td>  <td>find()</td>      <td>FormBean</td><td>/part3/step3</td></tr>
			<tr><td><i>/{topLevelMapping}/{id}</i></td>     <td>GET</td>   <td>read()</td>      <td>FormBean</td><td>/part3/step3/baz</td></tr>
			<tr><td><i>/{topLevelMapping}/new</i></td>      <td>GET</td>   <td>createForm()</td><td>FormBean</td><td>/part3/step3/new</td></tr>
			<tr><td><i>/{topLevelMapping}/new</i></td>      <td>POST</td>  <td>create()</td>    <td>FormBean</td><td>/part3/step3/new</td></tr>
			<tr><td><i>/{topLevelMapping}/{id}/edit</i></td><td>GET</td>   <td>updateForm()</td><td>FormBean</td><td>/part3/step3/baz/eidt</td></tr>
			<tr><td><i>/{topLevelMapping}/{id}/edit</i></td><td>PUT</td>   <td>update()</td>    <td>FormBean</td><td>/part3/step3/baz/eidt</td></tr>
			<tr><td><i>/{topLevelMapping}/{id}/edit</i></td><td>DELETE</td><td>delete()</td>    <td>FormBean</td><td>/part3/step3/baz/eidt</td></tr>
		</table>
	</subsection>
	<subsection name="Service Layer">
		<p>
		@Springfield(strategy=Strategy.DTO) 에 의해 생성된 EntityService 는  EntityRepository 를 주입 받지 않는다. 
		</p>
		<dl>
			<dt>com.u2ware.springfield.service.EntityServiceImpl</dt>
			<p>
			<dd><b>EntityServiceImpl</b> 은   <i>EntityRepository</i> 를 주입 받지 않았다면, 아무 동작도 하지않는 Dummy Service 가 된다.</dd>
			<dd>따라서, 여러 Repository 들을 주입 받아서 이를 확장하면 자유롭게 비즈니스 로직의 구현이 가능하다.</dd>
			</p>
			<dd>예제에서는 FormBean 으로 TargetBean 을 CRUD 하는 서비스를 구현하고 있다.</dd>
		</dl>
	</subsection>

</section>
</body>
</document>